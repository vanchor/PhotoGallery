@page "/"
@using PhotoGallery.Helpers
@using PhotoGallery.Services

@inject IPhotoService PhotoService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>My images</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="col-6">
            <div class="form-group">
                <div class="card" style="width: 300px;">

                    <InputFile OnChange="OnInputFileChange" hidden accept="image/png, image/jpeg" id="fileInput"/>
                    <label for="fileInput" style="cursor: pointer">
                        <img class="card-img-top" height="300" src="@previewImage" alt="New photo preview">
                        </label>

                    <div class="card-body">
                        <input type="text" @bind="PhotoTitle" @oninput="@((e) => { PhotoTitle=(string)e.Value;})" class="form-control" placeholder="Photo title..." />
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-sm btn-success" type="button" @onclick="UploadFile">
                            Upload
                        </button>
                    </div>
                </div>
            </div>
            <br />
            <label>@labelText</label>
        </div>

    </Authorized>
    <NotAuthorized>
        <h2>You must be authorized</h2>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string previewImage = "images/static/upload.png";

    private IBrowserFile selectedFile;
    
    private string? PhotoTitle { get; set; }
    private string labelText = "";

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles()[0];
        var imageUrl = await FileHelper.GeneratePhotoPreviewAsync(selectedFile, 300, 300);
        previewImage = imageUrl;
    }

    private async Task UploadFile()
    {
        try
        {
            if (selectedFile is not null)
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User.Identity?.Name;
                if (user == null)
                    throw new ArgumentNullException("You must be authorized to upload the file");
                await PhotoService.CreatePhoto(new Models.PhotoVM
                {
                    Title = PhotoTitle,
                    file = selectedFile,
                    Username = user,
                });
            }
        }
        catch (Exception ex)
        {
            labelText = ex.Message;
        }
    }
}
